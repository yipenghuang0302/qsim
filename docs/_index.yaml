# Copyright 2020 Google LLC. All Rights Reserved.
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.
# ==============================================================================
book_path: /qsim/_book.yaml
project_path: /qsim/_project.yaml
description: >
  Quantum circuit simulators qsim and qsimh.
landing_page:
  custom_css_path: /site-assets/css/style.css
  rows:
  - classname: quantum-hero quantum-hero--qsim quantum-hero--icon-medium
    options:
    - hero
    - description-50
    - padding-large
    heading: qsim and qsimh
    icon:
      path: /site-assets/images/icons/icon_qsim.png
    description: >
      Optimized quantum circuit simulators
    items:
    - description: >
        <h4>qsim</h4>
        <p>
        qsim is a full wave function simulator written in C++. It uses gate
        fusion, AVX/FMA vectorized instructions and multi-threading using
        OpenMP to achieve state of the art simulations of quantum circuits.
        qsim is integrated with Cirq and can be used to run simulations of up
        to 40 qubits on a 90 core Intel Xeon workstation.
        </p>
        <h4>qsimh</h4>
        <p>
        qsimh is a hybrid Schrödinger-Feynman simulator built for parallel
        execution on a cluster of machines. It produces amplitudes for user-
        specified output bitstrings.
        </p>
      buttons:
      - label: Get started with qsim on Cirq
        path: /qsim/tutorials/qsimcirq
        classname: button button-primary
        icon_name: open_in_new
      - label: GitHub repository
        path: //github.com/quantumlib/qsim
        classname: button button-white
        icon_name: open_in_new
      code_block: |
        <pre class = "prettyprint">
        import cirq
        import qsimcirq

        # Pick up to ~36 qubits to run on a large multi-core Intel CPU machine
        qubits = [cirq.GridQubit(i,j) for i in range(6) for j in range(6)]

        # Define a circuit to run (e.g. Quantum Supremacy Circuits)
        circuit = cirq.experiments.
            random_rotations_between_grid_interaction_layers_circuit(
            qubits=qubits, depth=16)

        # Simulate the circuit with qsim and return just the measurement values
        # just like you would with Cirq
        qsim_simulator = qsimcirq.QSimSimulator()
        qsim_results = qsim_simulator.run(circuit, repetitions=5)
        print('qsim results:')
        print(qsim_results)
        </pre>
  - classname: quantum-row quantum-row--yellow
    background: theme
    heading: "Features and updates"
    options:
    - cards
    items:
    - heading: "Schrödinger simulation via qsim"
      image_path: /site-assets/images/cards/qsim-card-schrodinger.png
      description: >
        qsim is a full wavefunction simulator that has been optimized to support
        vectorized operations and multi-threading.
      buttons:
      - label: "Learn more"
        path: /qsim/usage
    - heading: "Schrödinger-Feynman simulation via qsimh"
      image_path: /site-assets/images/cards/qsim-card-schrodinger-feynman.png
      description: >
        qsimh is a hybrid Schrödinger-Feynman simulator. It simulates separate
        disjoint sets of qubit using a full wave vector simulator, and then uses
        Feynman paths to sum over gates that span the sets.
      buttons:
      - label: "Learn more"
        path: /qsim/usage#qsimh_base_usage
    - heading: "Cirq integration"
      image_path: /site-assets/images/cards/qsim-card-cirq-integrations.png
      description: >
        Cirq is a python framework for writing, simulating, and executing
        quantum programs. Cirq’s built in simulator is useful to around 20
        qubits. By using the qsim Cirq simulator one can boost the number of
        qubits simulated to be mostly limited by available ram. Up to 40 qubits
        can be simulated on a 90 core Intel Xeon workstation.
      buttons:
      - label: "Learn more"
        path: /qsim/cirq_interface
    - heading: "Install qsim on GCP"
      image_path: /site-assets/images/cards/qsim-card-gcp.jpg
      description: >
        Learn how to simulate up to 38 qubits on Google Cloud’s Compute Engine.
        qsim has a prepackaged docker image that allows easy deployment of qsim,
        Juypter, and Cirq onto a virtual machine.
      buttons:
      - label: "Learn more"
        path: /qsim/tutorials/qsimcirq_gcp
